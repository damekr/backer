// Code generated by protoc-gen-go.
// source: protoclnt/baclnt.proto
// DO NOT EDIT!

/*
Package protoclnt is a generated protocol buffer package.

It is generated from these files:
	protoclnt/baclnt.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	Paths
	Status
	Info
	TriggerRestoreMessage
	TriggerRestoreResponse
*/
package protoclnt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message contains a hostname of requester
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response for hello contains a hostname of replayer
type HelloReply struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The request message containing the user's name.
type Paths struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *Paths) Reset()                    { *m = Paths{} }
func (m *Paths) String() string            { return proto.CompactTextString(m) }
func (*Paths) ProtoMessage()               {}
func (*Paths) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Paths) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Paths) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// The response message containing the greetings
type Status struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Status) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Info struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Size   int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Exists bool   `protobuf:"varint,4,opt,name=exists" json:"exists,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Info) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Info) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Info) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Info) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type TriggerRestoreMessage struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Reqcapacity   int64  `protobuf:"varint,2,opt,name=reqcapacity" json:"reqcapacity,omitempty"`
	Startlistener bool   `protobuf:"varint,3,opt,name=startlistener" json:"startlistener,omitempty"`
}

func (m *TriggerRestoreMessage) Reset()                    { *m = TriggerRestoreMessage{} }
func (m *TriggerRestoreMessage) String() string            { return proto.CompactTextString(m) }
func (*TriggerRestoreMessage) ProtoMessage()               {}
func (*TriggerRestoreMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TriggerRestoreMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TriggerRestoreMessage) GetReqcapacity() int64 {
	if m != nil {
		return m.Reqcapacity
	}
	return 0
}

func (m *TriggerRestoreMessage) GetStartlistener() bool {
	if m != nil {
		return m.Startlistener
	}
	return false
}

type TriggerRestoreResponse struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ok         bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Listenerok bool   `protobuf:"varint,3,opt,name=listenerok" json:"listenerok,omitempty"`
}

func (m *TriggerRestoreResponse) Reset()                    { *m = TriggerRestoreResponse{} }
func (m *TriggerRestoreResponse) String() string            { return proto.CompactTextString(m) }
func (*TriggerRestoreResponse) ProtoMessage()               {}
func (*TriggerRestoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TriggerRestoreResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TriggerRestoreResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *TriggerRestoreResponse) GetListenerok() bool {
	if m != nil {
		return m.Listenerok
	}
	return false
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "protoclnt.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "protoclnt.HelloReply")
	proto.RegisterType((*Paths)(nil), "protoclnt.Paths")
	proto.RegisterType((*Status)(nil), "protoclnt.Status")
	proto.RegisterType((*Info)(nil), "protoclnt.Info")
	proto.RegisterType((*TriggerRestoreMessage)(nil), "protoclnt.TriggerRestoreMessage")
	proto.RegisterType((*TriggerRestoreResponse)(nil), "protoclnt.TriggerRestoreResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Baclnt service

type BaclntClient interface {
	TriggerBackup(ctx context.Context, opts ...grpc.CallOption) (Baclnt_TriggerBackupClient, error)
	TriggerRestore(ctx context.Context, in *TriggerRestoreMessage, opts ...grpc.CallOption) (*TriggerRestoreResponse, error)
	GetStatusPaths(ctx context.Context, opts ...grpc.CallOption) (Baclnt_GetStatusPathsClient, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SendRestorePaths(ctx context.Context, opts ...grpc.CallOption) (Baclnt_SendRestorePathsClient, error)
}

type baclntClient struct {
	cc *grpc.ClientConn
}

func NewBaclntClient(cc *grpc.ClientConn) BaclntClient {
	return &baclntClient{cc}
}

func (c *baclntClient) TriggerBackup(ctx context.Context, opts ...grpc.CallOption) (Baclnt_TriggerBackupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Baclnt_serviceDesc.Streams[0], c.cc, "/protoclnt.Baclnt/TriggerBackup", opts...)
	if err != nil {
		return nil, err
	}
	x := &baclntTriggerBackupClient{stream}
	return x, nil
}

type Baclnt_TriggerBackupClient interface {
	Send(*Paths) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type baclntTriggerBackupClient struct {
	grpc.ClientStream
}

func (x *baclntTriggerBackupClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *baclntTriggerBackupClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baclntClient) TriggerRestore(ctx context.Context, in *TriggerRestoreMessage, opts ...grpc.CallOption) (*TriggerRestoreResponse, error) {
	out := new(TriggerRestoreResponse)
	err := grpc.Invoke(ctx, "/protoclnt.Baclnt/TriggerRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baclntClient) GetStatusPaths(ctx context.Context, opts ...grpc.CallOption) (Baclnt_GetStatusPathsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Baclnt_serviceDesc.Streams[1], c.cc, "/protoclnt.Baclnt/GetStatusPaths", opts...)
	if err != nil {
		return nil, err
	}
	x := &baclntGetStatusPathsClient{stream}
	return x, nil
}

type Baclnt_GetStatusPathsClient interface {
	Send(*Paths) error
	Recv() (*Info, error)
	grpc.ClientStream
}

type baclntGetStatusPathsClient struct {
	grpc.ClientStream
}

func (x *baclntGetStatusPathsClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *baclntGetStatusPathsClient) Recv() (*Info, error) {
	m := new(Info)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baclntClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/protoclnt.Baclnt/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baclntClient) SendRestorePaths(ctx context.Context, opts ...grpc.CallOption) (Baclnt_SendRestorePathsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Baclnt_serviceDesc.Streams[2], c.cc, "/protoclnt.Baclnt/SendRestorePaths", opts...)
	if err != nil {
		return nil, err
	}
	x := &baclntSendRestorePathsClient{stream}
	return x, nil
}

type Baclnt_SendRestorePathsClient interface {
	Send(*Paths) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type baclntSendRestorePathsClient struct {
	grpc.ClientStream
}

func (x *baclntSendRestorePathsClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *baclntSendRestorePathsClient) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Baclnt service

type BaclntServer interface {
	TriggerBackup(Baclnt_TriggerBackupServer) error
	TriggerRestore(context.Context, *TriggerRestoreMessage) (*TriggerRestoreResponse, error)
	GetStatusPaths(Baclnt_GetStatusPathsServer) error
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SendRestorePaths(Baclnt_SendRestorePathsServer) error
}

func RegisterBaclntServer(s *grpc.Server, srv BaclntServer) {
	s.RegisterService(&_Baclnt_serviceDesc, srv)
}

func _Baclnt_TriggerBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BaclntServer).TriggerBackup(&baclntTriggerBackupServer{stream})
}

type Baclnt_TriggerBackupServer interface {
	SendAndClose(*Status) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type baclntTriggerBackupServer struct {
	grpc.ServerStream
}

func (x *baclntTriggerBackupServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *baclntTriggerBackupServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Baclnt_TriggerRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRestoreMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaclntServer).TriggerRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoclnt.Baclnt/TriggerRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaclntServer).TriggerRestore(ctx, req.(*TriggerRestoreMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baclnt_GetStatusPaths_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BaclntServer).GetStatusPaths(&baclntGetStatusPathsServer{stream})
}

type Baclnt_GetStatusPathsServer interface {
	Send(*Info) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type baclntGetStatusPathsServer struct {
	grpc.ServerStream
}

func (x *baclntGetStatusPathsServer) Send(m *Info) error {
	return x.ServerStream.SendMsg(m)
}

func (x *baclntGetStatusPathsServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Baclnt_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaclntServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoclnt.Baclnt/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaclntServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baclnt_SendRestorePaths_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BaclntServer).SendRestorePaths(&baclntSendRestorePathsServer{stream})
}

type Baclnt_SendRestorePathsServer interface {
	SendAndClose(*HelloReply) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type baclntSendRestorePathsServer struct {
	grpc.ServerStream
}

func (x *baclntSendRestorePathsServer) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *baclntSendRestorePathsServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Baclnt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoclnt.Baclnt",
	HandlerType: (*BaclntServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerRestore",
			Handler:    _Baclnt_TriggerRestore_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Baclnt_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TriggerBackup",
			Handler:       _Baclnt_TriggerBackup_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStatusPaths",
			Handler:       _Baclnt_GetStatusPaths_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendRestorePaths",
			Handler:       _Baclnt_SendRestorePaths_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protoclnt/baclnt.proto",
}

func init() { proto.RegisterFile("protoclnt/baclnt.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x51, 0x4b, 0xe3, 0x40,
	0x10, 0x80, 0x9b, 0xb4, 0x97, 0x4b, 0xe7, 0xae, 0xbd, 0xde, 0x42, 0x7b, 0xa1, 0x0f, 0x47, 0x5c,
	0x7c, 0xc8, 0x53, 0x2b, 0x0a, 0xa2, 0x20, 0x08, 0x7d, 0x51, 0x1f, 0x04, 0xd9, 0x0a, 0x82, 0xf8,
	0xb2, 0x8d, 0x63, 0x1b, 0x92, 0x66, 0xd3, 0xec, 0x16, 0x8c, 0xff, 0xd3, 0xff, 0x23, 0xd9, 0xa4,
	0x25, 0xa5, 0x29, 0xf8, 0x94, 0xdd, 0x6f, 0x66, 0xf2, 0x4d, 0x32, 0x03, 0x83, 0x24, 0x15, 0x4a,
	0xf8, 0x51, 0xac, 0xc6, 0x33, 0x9e, 0x3f, 0x46, 0x1a, 0x90, 0xf6, 0x96, 0x53, 0x0a, 0xbf, 0x6f,
	0x31, 0x8a, 0x04, 0xc3, 0xd5, 0x1a, 0xa5, 0x22, 0x04, 0x5a, 0x31, 0x5f, 0xa2, 0x63, 0xb8, 0x86,
	0xd7, 0x66, 0xfa, 0x4c, 0x5d, 0x80, 0x32, 0x27, 0x89, 0xb2, 0xda, 0x8c, 0x31, 0xfc, 0x78, 0xe0,
	0x6a, 0x21, 0xeb, 0x82, 0x39, 0x4b, 0xb8, 0x5a, 0x38, 0x66, 0xc1, 0xf2, 0x33, 0x3d, 0x07, 0x6b,
	0xaa, 0xb8, 0x5a, 0xd7, 0x57, 0x38, 0xf0, 0x73, 0x89, 0x52, 0xf2, 0x39, 0x96, 0x45, 0x9b, 0x2b,
	0x7d, 0x86, 0xd6, 0x5d, 0xfc, 0x26, 0xbe, 0xeb, 0xc9, 0x99, 0x0c, 0x3e, 0xd0, 0x69, 0xba, 0x86,
	0xd7, 0x64, 0xfa, 0x4c, 0x06, 0x60, 0xe1, 0x7b, 0x20, 0x95, 0x74, 0x5a, 0xae, 0xe1, 0xd9, 0xac,
	0xbc, 0x51, 0x09, 0xfd, 0xc7, 0x34, 0x98, 0xcf, 0x31, 0x65, 0x28, 0x95, 0x48, 0xf1, 0xbe, 0x90,
	0xd6, 0xca, 0x5c, 0xf8, 0x95, 0xe2, 0xca, 0xe7, 0x09, 0xf7, 0x03, 0x95, 0x69, 0x67, 0x93, 0x55,
	0x11, 0x39, 0x86, 0x8e, 0x54, 0x3c, 0x55, 0x51, 0x20, 0x15, 0xc6, 0x98, 0xea, 0x1e, 0x6c, 0xb6,
	0x0b, 0xe9, 0x0b, 0x0c, 0x76, 0xa5, 0x0c, 0x65, 0x22, 0x62, 0x59, 0x6f, 0xed, 0x82, 0x29, 0x42,
	0x2d, 0xb3, 0x99, 0x29, 0x42, 0xf2, 0x1f, 0x60, 0xf3, 0x26, 0x11, 0x96, 0x82, 0x0a, 0x39, 0xfd,
	0x34, 0xc1, 0x9a, 0xe8, 0xc9, 0x93, 0x0b, 0xe8, 0x94, 0xa2, 0x09, 0xf7, 0xc3, 0x75, 0x42, 0x7a,
	0xa3, 0xed, 0x16, 0x8c, 0xf4, 0xf0, 0x86, 0x7f, 0x2b, 0xa4, 0x98, 0x0e, 0x6d, 0x78, 0x06, 0x79,
	0x82, 0xee, 0x6e, 0x8b, 0xc4, 0xad, 0x24, 0xd6, 0xfe, 0xb2, 0xe1, 0xd1, 0xc1, 0x8c, 0xcd, 0xf7,
	0xd1, 0x06, 0xb9, 0x84, 0xee, 0x0d, 0xaa, 0xc2, 0x54, 0xac, 0xcf, 0x7e, 0x4f, 0x7f, 0x2a, 0x24,
	0x9f, 0x7c, 0xde, 0xd1, 0x89, 0x41, 0xae, 0xc0, 0x9e, 0xf2, 0x4c, 0x6f, 0x25, 0xf9, 0x57, 0x49,
	0xa9, 0xee, 0xf2, 0xb0, 0xbf, 0x1f, 0x48, 0xa2, 0x8c, 0x36, 0xc8, 0x35, 0xf4, 0xa6, 0x18, 0xbf,
	0x96, 0x1d, 0x1d, 0x52, 0x1f, 0x2a, 0xf7, 0x8c, 0x99, 0xa5, 0x23, 0x67, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0x3a, 0xd8, 0xd6, 0x61, 0x03, 0x00, 0x00,
}
